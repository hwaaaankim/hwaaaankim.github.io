{"version":3,"sources":["Detail.js"],"names":["박스","styled","div","제목","h4","props","색상","TabComponent","useEffect","스위치변경","누른탭","Info","재고","connect","state","reducer","useContext","재고context","useState","alert","alert변경","history","useHistory","id","useParams","찾은상품","shoes","find","data","num","parseInt","inputData","inputData변경","누른탭변경","스위치","타이머","setTimeout","console","log","clearTimeout","className","onChange","e","target","value","src","width","title","content","price","onClick","재고변경","dispatch","type","payload","name","quan","push","goBack","variant","defaultActiveKey","Item","Link","eventKey","in","classNames","timeout"],"mappings":"8ZAgBA,IAAIA,EAAKC,IAAOC,IAAV,KAIFC,EAAKF,IAAOG,GAAV,KAEK,SAACC,GAAD,OAAWA,EAAMC,gBA4I5B,SAASC,EAAaF,GAIpB,OAHAG,qBAAU,WACRH,EAAMI,gCAAM,MAEI,IAAdJ,EAAMK,mBACD,gDACgB,IAAdL,EAAMK,mBACR,gDAEA,gDAIX,SAASC,EAAKN,GACZ,OAAO,gDAASA,EAAMO,aAAG,MAhBZC,uBAPf,SAAsBC,GACpB,MAAO,CACLA,MAAOA,EAAMC,WAKFF,EAvIf,SAAgBR,GACd,IAAIO,EAAKI,qBAAWC,KADC,EAGEC,oBAAS,GAHX,mBAGhBC,EAHgB,KAGTC,EAHS,KAIjBC,EAAUC,cACRC,EAAOC,cAAPD,GACFE,EAAOpB,EAAMqB,MAAMC,MAAK,SAAUC,GACpC,OAAOA,EAAKL,IAAMA,KAEhBM,EAAMC,SAASP,GAAM,EATJ,EAUUL,mBAAS,IAVnB,mBAUhBa,EAVgB,KAULC,EAVK,OAWFd,mBAAS,GAXP,mBAWhBR,EAXgB,KAWXuB,EAXW,OAYFf,oBAAS,GAZP,mBAYhBgB,EAZgB,KAYXzB,EAZW,KAsBrB,OATAD,qBAAU,WACR,IAAI2B,EAAMC,YAAW,WACnBhB,GAAQ,KACP,KAEH,OADAiB,QAAQC,IAAI,gBACL,WACLC,aAAaJ,MAEd,CAAChB,IAEF,sBAAKqB,UAAU,YAAf,UACE,cAACxC,EAAD,UACE,cAACG,EAAD,CAAIqC,UAAU,MAAd,+CAGF,uBACEC,SAAU,SAACC,GACTV,EAAYU,EAAEC,OAAOC,WAGd,IAAVzB,EACC,sBAAKqB,UAAU,WAAf,UACE,4GACA,gDAAS5B,QAET,KACHmB,EACD,sBAAKS,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,qBACEK,IAAK,4CAA8ChB,EAAM,OACzDiB,MAAM,WAGV,sBAAKN,UAAU,gBAAf,UACE,oBAAIA,UAAU,OAAd,SAAsBf,EAAKsB,QAC3B,4BAAItB,EAAKuB,UACT,8BAAIvB,EAAKwB,MAAT,YAEA,cAACtC,EAAD,CAAMC,eAAIP,EAAMO,eAChB,wBACE4B,UAAU,sBACVU,QAAS,WACP7C,EAAM8C,yBAAK,CAAC,EAAG,GAAI,KACnB9C,EAAM+C,SAAS,CACbC,KAAM,2BACNC,QAAS,CACP/B,GAAIE,EAAKF,GACTgC,KAAM9B,EAAKsB,MACXS,KAAM,KAGVnC,EAAQoC,KAAK,UAZjB,sCAkBA,wBACEjB,UAAU,iBACVU,QAAS,WACP7B,EAAQqC,UAHZ,4CAWJ,eAAC,IAAD,CAAKlB,UAAU,OAAOmB,QAAQ,OAAOC,iBAAiB,WAAtD,UACE,cAAC,IAAIC,KAAL,UACE,cAAC,IAAIC,KAAL,CACEC,SAAS,SACTb,QAAS,WACPzC,GAAM,GACNwB,EAAM,IAJV,6BAUF,cAAC,IAAI4B,KAAL,UACE,cAAC,IAAIC,KAAL,CACEC,SAAS,SACTb,QAAS,WACPzC,GAAM,GACNwB,EAAM,IAJV,6BAUF,cAAC,IAAI4B,KAAL,UACE,cAAC,IAAIC,KAAL,CACEC,SAAS,SACTb,QAAS,WACPzC,GAAM,GACNwB,EAAM,IAJV,gCAaJ,cAAC,IAAD,CAAe+B,GAAI9B,EAAK+B,WAAW,MAAMC,QAAS,IAAlD,SACE,cAAC3D,EAAD,CAAcG,qBAAKA,EAAKD,iCAAOA","file":"static/js/4.829e8dab.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport \"./Detail.scss\";\r\nimport { 재고context } from \"./App.js\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Navbar,\r\n  Nav,\r\n  NavDropdown,\r\n  Form,\r\n  Button,\r\n  FormControl,\r\n  Jumbotron,\r\n} from \"react-bootstrap\";\r\nlet 박스 = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nlet 제목 = styled.h4`\r\n  font-size: 25px;\r\n  color: ${(props) => props.색상};\r\n`;\r\n\r\nfunction Detail(props) {\r\n  let 재고 = useContext(재고context);\r\n\r\n  let [alert, alert변경] = useState(true);\r\n  let history = useHistory();\r\n  let { id } = useParams();\r\n  let 찾은상품 = props.shoes.find(function (data) {\r\n    return data.id == id;\r\n  });\r\n  let num = parseInt(id) + 1;\r\n  let [inputData, inputData변경] = useState(\"\");\r\n  let [누른탭, 누른탭변경] = useState(0);\r\n  let [스위치, 스위치변경] = useState(false);\r\n  useEffect(() => {\r\n    let 타이머 = setTimeout(() => {\r\n      alert변경(false);\r\n    }, 2000);\r\n    console.log(\"안녕\");\r\n    return () => {\r\n      clearTimeout(타이머);\r\n    };\r\n  }, [alert]);\r\n  return (\r\n    <div className=\"container\">\r\n      <박스>\r\n        <제목 className=\"red\">상세 페이지</제목>\r\n      </박스>\r\n\r\n      <input\r\n        onChange={(e) => {\r\n          inputData변경(e.target.value);\r\n        }}\r\n      ></input>\r\n      {alert === true ? (\r\n        <div className=\"my-alert\">\r\n          <p>재고가 얼마 남지 않았습니다</p>\r\n          <p>재고 : {재고}</p>\r\n        </div>\r\n      ) : null}\r\n      {inputData}\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <img\r\n            src={\"https://codingapple1.github.io/shop/shoes\" + num + \".jpg\"}\r\n            width=\"100%\"\r\n          />\r\n        </div>\r\n        <div className=\"col-md-6 mt-4\">\r\n          <h4 className=\"pt-5\">{찾은상품.title}</h4>\r\n          <p>{찾은상품.content}</p>\r\n          <p>{찾은상품.price}원</p>\r\n\r\n          <Info 재고={props.재고}></Info>\r\n          <button\r\n            className=\"btn btn-danger mr-1\"\r\n            onClick={() => {\r\n              props.재고변경([9, 11, 12]);\r\n              props.dispatch({\r\n                type: \"항목추가\",\r\n                payload: {\r\n                  id: 찾은상품.id,\r\n                  name: 찾은상품.title,\r\n                  quan: 1,\r\n                },\r\n              });\r\n              history.push(\"/cart\");\r\n              // push를 사용하면 강제새로고침 없이 페이지 이동하여 state반영 된 것을 확인\r\n            }}\r\n          >\r\n            주문하기\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger\"\r\n            onClick={() => {\r\n              history.goBack();\r\n            }}\r\n          >\r\n            뒤로가기\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <Nav className=\"mt-5\" variant=\"tabs\" defaultActiveKey=\"link - 0\">\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            eventKey=\"link-0\"\r\n            onClick={() => {\r\n              스위치변경(false);\r\n              누른탭변경(0);\r\n            }}\r\n          >\r\n            1번탭\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            eventKey=\"link-1\"\r\n            onClick={() => {\r\n              스위치변경(false);\r\n              누른탭변경(1);\r\n            }}\r\n          >\r\n            2번탭\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n        <Nav.Item>\r\n          <Nav.Link\r\n            eventKey=\"link-2\"\r\n            onClick={() => {\r\n              스위치변경(false);\r\n              누른탭변경(2);\r\n            }}\r\n          >\r\n            3번탭\r\n          </Nav.Link>\r\n        </Nav.Item>\r\n      </Nav>\r\n\r\n      {/* 조건이 3개 이상인 경우 삼항연산자가 사용이 부적합하다 => Component 사용하여 제대로 된 if 문 사용 */}\r\n      <CSSTransition in={스위치} classNames=\"wow\" timeout={500}>\r\n        <TabComponent 누른탭={누른탭} 스위치변경={스위치변경}></TabComponent>\r\n      </CSSTransition>\r\n      {/* in 속성은 true일때만 해당 기능이 동작 , wow는 임의로 지정한 className, timeout 은 동작 시간 ms단위 \r\n      in 속성은 state로 만들어서 사용*/}\r\n    </div>\r\n  );\r\n}\r\n//export default Detail;\r\nfunction state를props화(state) {\r\n  return {\r\n    state: state.reducer, //state 는 store에 있는 모든 데이터\r\n  };\r\n}\r\n// redux store 데이터를 가져와서 props로 변환 해주는 함수\r\n// redux의 사용은 복잡한 props 전송이 필요 없고, 데이터 관리가 용이 - state데이터의 수정 방법을 미리 정의\r\nexport default connect(state를props화)(Detail);\r\n\r\nfunction TabComponent(props) {\r\n  useEffect(() => {\r\n    props.스위치변경(true);\r\n  });\r\n  if (props.누른탭 === 0) {\r\n    return <div>0번째</div>;\r\n  } else if (props.누른탭 === 1) {\r\n    return <div>1번째</div>;\r\n  } else {\r\n    return <div>2번째</div>;\r\n  }\r\n}\r\n\r\nfunction Info(props) {\r\n  return <p>재고 : {props.재고[0]}</p>;\r\n}\r\n"],"sourceRoot":""}